@model LRC_NET_Framework.Models.ActivityByMemberModels

@{
    ViewBag.Title = "Add Activity By Member";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="font-weight-bold"  aria-hidden="true" style="background-color: #357ebd; border-bottom-left-radius:7px; border-bottom-right-radius:7px; color:gainsboro; padding-top:5px; padding-bottom:5px; padding-left:30px;"><h4>Manage Member Activity (@ViewBag.MemberName)</h4></div>
<div class="col-md-11 col-md-offset-1"><h4>Add New or Edit Assigned Activity</h4></div>

@using LRC_NET_Framework.Helpers
@Html.CreateList(ViewData["ErrorList"] as List<string>)

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.MemberID)

<div class="form-horizontal" style="font-size:smaller;">
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        <div class="col-md-11 col-md-offset-1" id="ActID">
            @Html.Label("ActID", "Activity", htmlAttributes: new { @class = "control-label" })<span class="text-danger">&nbsp;&nbsp;*</span>
            <div style="width: 100%;">
                <div style="float: left;">
                    @Html.DropDownList("ActivityID", null, htmlAttributes: new { @class = "form-control ddlControl" })
                    @Html.ValidationMessageFor(model => model.ActivityID, "", new { @class = "text-danger" })
                </div>
                <div style="float: left; margin-left:10px">
                    <a href="@Url.Action("CreateActivity", new { callback = "AddActivity", memberId = Model.MemberID })" class="btn btn-primary"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></a>
                </div>
            </div>
        </div>
    </div>

    <div id="HiddenBlock" hidden="hidden">

        <div class="form-group">
            <div class="col-md-11 col-md-offset-1">
                <div class="col-md-12" style="font-weight:bold">Activity Status</div>
                <div class="col-md-3" id="ActivityStatusBefore" style="border-color:lightgrey; border-style:solid; border-width:1px; border-radius:5px; padding-bottom:10px;">
                    @Html.Label("ActivityStatusBefore", "Before The Fact", htmlAttributes: new { @class = "control-label" })<span class="text-danger">&nbsp;&nbsp;*</span>
                    @foreach (var myValue in ViewBag.ActivityStatus as List<tb_ActivityStatus>)
                    {
                        <div class="checkbox">
                            @Html.RadioButton("ActivityStatusID", myValue.ActivityStatusID, false, new { id = myValue.ActivityStatusName, disabled = "disabled"})
                            @Html.Label(myValue.ActivityStatusName, myValue.ActivityStatusName)
                        </div>
                    }
                    @Html.ValidationMessageFor(model => model.ActivityStatusID, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-3" id="ActivityStatusAfter" style="border-color:lightgrey; border-style:solid; border-width:1px; border-radius:5px; padding-bottom:10px; margin-left:10px;">
                    @Html.Label("ActivityStatusAfter", "After The Fact", htmlAttributes: new { @class = "control-label" })
                    @foreach (var myValue in ViewBag.ActivityStatusAfter as List<SelectListItem>)
                    {
                        <div class="checkbox">
                            @Html.RadioButton("AfterTheFact", myValue.Value, new { id = myValue.Text, disabled = "disabled", @class = "radioSettings" })
                            @Html.Label(myValue.Text, new { disabled = "disabled" })
                        </div>
                     }
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-11 col-md-offset-1">
                @Html.Label("ActivityDate", "Activity Date", htmlAttributes: new { @class = "control-label" })<span class="text-danger">&nbsp;&nbsp;*</span>
                @Html.TextBoxFor(model => model.tb_Activity.ActivityDate, "{0:yyyy-MM-dd}", new { @class = "form-control datecontrol", type = "date", style = "width: 150px;" })
                @Html.ValidationMessageFor(model => model.tb_Activity.ActivityDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-11 col-md-offset-1">
                @Html.Label("ActivityNote", "Activity Note", htmlAttributes: new { @class = "control-label" })
                @Html.TextAreaFor(model => model.tb_Activity.ActivityNote, new { @class = "form-control", @cols = "100", @rows = "5", @style = "width:100%;" })
                @Html.ValidationMessageFor(model => model.tb_Activity.ActivityNote, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Submit" class="btn btn-primary" />
            </div>
        </div>

    </div>

    <div class="row" style="padding-top:20px;">
        <div class="col-md-8 col-md-offset-1" id="Activities" style="background-color:lavender; border:solid; margin-top:20px; border-radius:5px; border-width:1px; border-color:gainsboro">

            <div style="background-color:gainsboro; padding-bottom:5px; padding-left:30px; border-bottom-left-radius:5px; border-bottom-right-radius:5px;">@Html.Label("Activities", "Member Activitiy", htmlAttributes: new { @class = "control-label", style = "font-size:larger;" })</div>

            <table class="table">
                <tr class="text-info">
                    <th>
                        Activity
                    </th>
                    <th>
                        Date
                    </th>
                    <th>
                        Status
                    </th>
                    <th>
                        Ex Post Status
                    </th>
                    <th>
                        Note
                    </th>
                </tr>
                @foreach(var ma in ViewBag.MemberActivities as List<tb_MemberActivity>)
                {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => ma.tb_Activity.ActivityName)
                    </td>
                    <td>
                        @Convert.ToDateTime(ma.tb_Activity.ActivityDate).ToString("MM/dd/yyyy")
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => ma.tb_ActivityStatus.ActivityStatusName)
                    </td>
                    <td>
                        @if(ma.Participated.HasValue) {
                            if (ma.Participated.GetValueOrDefault()) {<span>Participated</span>}
                            else {<span>Not Participated</span>}
                        }
                        else {<span>Not Defined</span>}
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => ma.tb_Activity.ActivityNote)
                    </td>
                </tr>
                }
            </table>
        </div>
    </div>
</div>
}

<hr />
@section Scripts {
    <script src='@Url.Content("~/Scripts/jquery-1.12.4.min.js")' type="text/javascript"></script>
    <script src='@Url.Content("~/Scripts/jquery-ui-1.12.1.min.js")' type="text/javascript"></script>

<script type="text/javascript">
    var radioArray = new Array(2);
    $('.radioSettings').each(function () {
        if ($(this).prop('checked') == true) {
            radioArray[$(this).attr('id')] = 1;
        }
        else {
            radioArray[$(this).attr('id')] = 0;
        }
    });
    $('.radioSettings').click(function () {
        radioId = $(this).attr('id');
        if (radioArray[radioId] == 1) {
            $(this).prop('checked', false);
            radioArray[radioId] = 0; // changing the value of given key of array
        }
        else {
            $(this).prop('checked', true);
            radioArray[radioId] = 1; // changing the value of given key of array
        }
    });

    function setRadioButtons(obj) {
        rb_Committed = document.getElementById("Committed");
        rb_Committed.disabled = false;
        if (obj.ActivityStatusBeforeTheFact == "Committed")
            rb_Committed.checked = true;
        else
            rb_Committed.checked = false;

        rb_Tentative = document.getElementById("Tentative");
        rb_Tentative.disabled = false;
        if (obj.ActivityStatusBeforeTheFact == "Tentative")
            rb_Tentative.checked = true;
        else
            rb_Tentative.checked = false;

        rb_Participated = document.getElementById("Participated");
        rb_Participated.disabled = false;
        if (obj.ActivityStatusAfterTheFact == "Participated")
            rb_Participated.checked = true;
        else
            rb_Participated.checked = false;


        rb_NotParticipated = document.getElementById("Not Participated");
        rb_NotParticipated.disabled = false;
        if (obj.ActivityStatusAfterTheFact == "Not Participated")
            rb_NotParticipated.checked = true;
        else
            rb_NotParticipated.checked = false;    }

    $(document).ready(function () {
        $(".ddlControl").change(function() {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetActivityDetailsById")',
                datatype: JSON,
                data: {
                    'activityID': $("#ActivityID").val(),
                    'memberID': @Html.Raw(Model.MemberID)
                },
                success: function(data) {
                    $('#ActivityDetails').empty();
                    var obj = JSON.parse(data);
                    if ($("#ActivityID").val() != 0) {
                        document.getElementById("HiddenBlock").hidden = false; 
                        $('#tb_Activity_ActivityNote').val(obj.ActivityNote);
                        $('#tb_Activity_ActivityDate').val(obj.ActivityDate);
                        setRadioButtons(obj);
                    }
                    else {
                        document.getElementById("HiddenBlock").hidden = true;
                    }
                },
                error: function(data) {}
            });
        });
    });
</script>

    @Scripts.Render("~/bundles/jqueryval")
}

